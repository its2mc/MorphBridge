/* Morph Bridge Application module. 
Created By: Phillip Ochola Mak'Anyengo,
Email: its2uraps@gmail.com, 
Github: https://github.com/its2mc,
License: 
*/

//Channel Object. This is the King Kunta.. :D 
var channels_obj = {
	//Variables to be used
	channel_list: [],	//Channel list
	channel: {
		time_stamp : 0,
		channelPass: '',
		subscribers: [],
		subscribe: function(sock){
			for(var i in this.subscribers) if(this.subscribers[i]==sock) return 0;
			this.subscribers.push(sock);
			return 1;
		},
		broadcast: function(msg){
			for (var i in this.subscribers)
				 this.subscribers[i].send(msg);
			return 1;
		}
	}, //Channel
	
	//functions
	init: function(){
	},	//Initializes channel object
	createChannel: function(channelId){
	},	//Adds a new channel
	purge: function(channelId){
	},	//purges a channel
	broadcast: function(channelId,msg){
		this.channel_list[channelId].broadcast(msg);
	},	//Broadcasting a message to a specific channel
	checkTimeout: function(){
	},	//Checks if the timeout has been passed
	timestamp: function(){
	},	//Adds a timestamp to the channel
	
};


module.exports.channels_obj = channels_obj;


//ZMQ interproc Communication Handler
var zmq = require('zmq'),
publisher = zmq.socket('pub');
subscriber = zmq.socket('sub');
var comms = {
	init: function(){
		//if publisher already bound skip
		publisher.bind('tcp://*:8688', function(err) {
 			if(err){
    			console.log("Port already established: connecting...");
				//if not then connect to bound publisher
				publisher.connect('tcp://localhost:8688',function(err){
						if(err)
							console.log(err);
					});
			}
  			else
    			console.log("Listening on 8688...");
			});
		return publisher;
		},
		
	subscribe: function(){
			subscriber.connect('tcp://localhost:8688', function(err){
					console.log(err);
				});
			subscriber.subscribe("");
			console.log("Subscribed to empty channel");
			return subscriber;
		}, //Subscribes to socket, the subscriber message handling will be defined 
	transmit: function(msg){
		publisher.send(msg);
		return 1;
	} //Transmits messages to all nodes
};

module.exports.comms = {};
module.exports.comms.init = comms.init;
module.exports.comms.subscribe = comms.subscribe;
module.exports.comms.transmit = comms.transmit;



//Log Handler: This will manage custom error messages for platform errors.
//The messages are coded to make it lighter for smaller devics
var winston = require('winston');
var logger = {
	init: function(){
		var temp = new (winston.Logger)({
			transports: [
				new (winston.transports.File({
					name: 'error-file',
					filename: 'logs/errors.log',
					level: 'error',
					handleExceptions: true
				})),
				new (winston.transports.File({
					name: 'info-file',
					filename: 'logs/stats.log',
					level: 'info'
				}))
			]
		});
		return temp;
	},
	logStat: function(){
		
		},
	logErr: function(){
		
		},
	logDebug: function(){
		
		}
};
module.exports.logger = {};
module.exports.logger.init = logger.init;
//module.exports.logger.error = logger.logErr;
//module.exports.logger.debug = logger.logDebug;
//module.exports.logger.status = logger.logStat;

